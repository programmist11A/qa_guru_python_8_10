{"name": "test_web", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=119.0.6045.105)\nStacktrace:\n\tGetHandleVerifier [0x005572A3+45731]\n\t(No symbol) [0x004E2D51]\n\t(No symbol) [0x003D86D0]\n\t(No symbol) [0x003CAFEB]\n\t(No symbol) [0x003C98EE]\n\t(No symbol) [0x003C9ED8]\n\t(No symbol) [0x003DA5B3]\n\t(No symbol) [0x0043BD41]\n\t(No symbol) [0x00427FDC]\n\t(No symbol) [0x0043B7A2]\n\t(No symbol) [0x00427DD6]\n\t(No symbol) [0x004031F6]\n\t(No symbol) [0x0040439D]\n\tGetHandleVerifier [0x00860716+3229462]\n\tGetHandleVerifier [0x008A84C8+3523784]\n\tGetHandleVerifier [0x008A214C+3498316]\n\tGetHandleVerifier [0x005E1680+611968]\n\t(No symbol) [0x004ECCCC]\n\t(No symbol) [0x004E8DF8]\n\t(No symbol) [0x004E8F1D]\n\t(No symbol) [0x004DB2C7]\n\tBaseThreadInitThunk [0x779400C9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77AC7B1E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77AC7AEE+238]", "trace": "def test_web():\n>       browser.open('/automation-practice-form')\n\ntest_home.py:7: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:1155: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n..\\venv\\lib\\site-packages\\selene\\core\\configuration.py:301: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n..\\venv\\lib\\site-packages\\selene\\core\\configuration.py:253: in get\n    driver.get(url)\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:353: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002E7E91453D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AC7B1E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77AC7AEE+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=119.0.6045.105)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005572A3+45731]\nE       \t(No symbol) [0x004E2D51]\nE       \t(No symbol) [0x003D86D0]\nE       \t(No symbol) [0x003CAFEB]\nE       \t(No symbol) [0x003C98EE]\nE       \t(No symbol) [0x003C9ED8]\nE       \t(No symbol) [0x003DA5B3]\nE       \t(No symbol) [0x0043BD41]\nE       \t(No symbol) [0x00427FDC]\nE       \t(No symbol) [0x0043B7A2]\nE       \t(No symbol) [0x00427DD6]\nE       \t(No symbol) [0x004031F6]\nE       \t(No symbol) [0x0040439D]\nE       \tGetHandleVerifier [0x00860716+3229462]\nE       \tGetHandleVerifier [0x008A84C8+3523784]\nE       \tGetHandleVerifier [0x008A214C+3498316]\nE       \tGetHandleVerifier [0x005E1680+611968]\nE       \t(No symbol) [0x004ECCCC]\nE       \t(No symbol) [0x004E8DF8]\nE       \t(No symbol) [0x004E8F1D]\nE       \t(No symbol) [0x004DB2C7]\nE       \tBaseThreadInitThunk [0x779400C9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AC7B1E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77AC7AEE+238]\n\n..\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "stderr", "source": "1acff81d-2ecc-40a0-bb30-a78a445c28c9-attachment.txt", "type": "text/plain"}], "start": 1699265464633, "stop": 1699265468349, "uuid": "ddb09768-e9bb-4368-ad3c-ba6f6c6d2fae", "historyId": "18dbf08e03f35faeb303f1b0a2dd21b8", "testCaseId": "18dbf08e03f35faeb303f1b0a2dd21b8", "fullName": "test_home#test_web", "labels": [{"name": "suite", "value": "test_home"}, {"name": "host", "value": "DESKTOP-DVATKHC"}, {"name": "thread", "value": "10532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_home"}]}